#include <SPI.h>

// Adaptado de https://github.com/dquadros/LCD12864
// Usa PSRAM só para mostrar que dá para usar

// Connections
const int pinCS = 7;    // GPIO7
const int pinRES = 6;   // GPIO6
const int pinRS = 5;    // GPIO5
#define LCD_SPI SPI

// RS pin convention
#define DATA HIGH
#define CMD  LOW

// SPI Configuration
SPISettings SPI_CONFIG(10000000, MSBFIRST, SPI_MODE3);

// ST7565R Commands
#define ST7565R_DISPLAY_OFF 0xAE
#define ST7565R_DISPLAY_ON  0xAF
#define ST7565R_SET_DISP_START_LINE 0x40
#define ST7565R_SET_PAGE    0xB0
#define ST7565R_SET_COLUMN_UPPER  0x10
#define ST7565R_SET_COLUMN_LOWER  0x00
#define ST7565R_SET_ADC_NORMAL  0xA0
#define ST7565R_SET_ADC_REVERSE 0xA1
#define ST7565R_SET_ALLPTS_NORMAL 0xA4
#define ST7565R_SET_ALLPTS_ON  0xA5
#define ST7565R_SET_BIAS_9 0xA2 
#define ST7565R_SET_BIAS_7 0xA3
#define ST7565R_RMW  0xE0
#define ST7565R_RMW_CLEAR 0xEE
#define ST7565R_INTERNAL_RESET  0xE2
#define ST7565R_SET_COM_NORMAL  0xC0
#define ST7565R_SET_COM_REVERSE  0xC8
#define ST7565R_SET_POWER_CONTROL  0x28
#define ST7565R_SET_RESISTOR_RATIO  0x20
#define ST7565R_SET_VOLUME_FIRST  0x81
#define ST7565R_SET_VOLUME_SECOND  0
#define ST7565R_SET_STATIC_OFF  0xAC
#define ST7565R_SET_STATIC_ON  0xAD
#define ST7565R_SET_STATIC_REG  0x0
#define ST7565R_SET_BOOSTER_FIRST  0xF8
#define ST7565R_SET_BOOSTER_234  0
#define ST7565R_SET_BOOSTER_5  1
#define ST7565R_SET_BOOSTER_6  3
#define ST7565R_NOP  0xE3
#define ST7565R_TEST  0xF0

// Screen size
#define LCD_WIDTH    128
#define LCD_HEIGHT   64

// Screen buffer
uint8_t *screenbuf;

// Display initialization commands
byte cmdInit[] =
{
  // cmd                              // delay
  ST7565R_SET_BIAS_7,                 0, 
  ST7565R_SET_ADC_NORMAL,             0,
  ST7565R_SET_COM_NORMAL,             0,
  ST7565R_SET_DISP_START_LINE,        0,
  ST7565R_SET_POWER_CONTROL | 0x4,    50,
  ST7565R_SET_POWER_CONTROL | 0x6,    50,
  ST7565R_SET_POWER_CONTROL | 0x7,    10,
  ST7565R_SET_RESISTOR_RATIO | 0x6,   0,
  ST7565R_DISPLAY_ON,                 0,
  ST7565R_SET_ALLPTS_NORMAL,          0,
  ST7565R_SET_VOLUME_FIRST,           0,
  ST7565R_SET_VOLUME_SECOND | 13,     0
};

/**
 * ssd1306xled_font8x16 is by Neven Boyanov
 *
 * @created: 2014-08-12
 * @author: Neven Boyanov
 *
 * Copyright (c) 2015 Neven Boyanov, Tinusaur Team. All Rights Reserved.
 * Distributed as open source software under MIT License, see LICENSE.txt file.
 * Please, as a favour, retain the link http://tinusaur.org to The Tinusaur Project.
 *
 * Source code available at: https://bitbucket.org/tinusaur/ssd1306xled
 *
 * Vertically inverted by Daniel Quadros
 */
const uint8_t font8x16 []=
{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //   0
    0x00, 0x00, 0x00, 0xCC, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, // ! 1
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x30, 0x60, 0x08, 0x30, 0x60, 0x00, // " 2
    0x20, 0xFC, 0x20, 0x20, 0xFC, 0x20, 0x20, 0x00, 0x02, 0x03, 0x1E, 0x02, 0x03, 0x1E, 0x02, 0x00, // # 3
    0x00, 0x18, 0x04, 0xFF, 0x84, 0x78, 0x00, 0x00, 0x00, 0x0E, 0x11, 0x3F, 0x10, 0x0C, 0x00, 0x00, // $ 4
    0x00, 0x84, 0x38, 0xC0, 0x78, 0x84, 0x78, 0x00, 0x0F, 0x10, 0x0F, 0x00, 0x07, 0x18, 0x00, 0x00, // % 5
    0x78, 0x84, 0xC4, 0x24, 0x98, 0xE4, 0x84, 0x08, 0x00, 0x0F, 0x10, 0x11, 0x0E, 0x00, 0x00, 0x00, // & 6
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x68, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, // ' 7
    0x00, 0x00, 0x00, 0xE0, 0x18, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x07, 0x18, 0x20, 0x40, 0x00, // ( 8
    0x00, 0x02, 0x04, 0x18, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x40, 0x20, 0x18, 0x07, 0x00, 0x00, 0x00, // ) 9
    0x40, 0x40, 0x80, 0xF0, 0x80, 0x40, 0x40, 0x00, 0x02, 0x02, 0x01, 0x0F, 0x01, 0x02, 0x02, 0x00, // * 10
    0x80, 0x80, 0x80, 0xF8, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, // + 11
    0x01, 0x0D, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // , 12
    0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // - 13
    0x00, 0x0C, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // . 14
    0x00, 0x06, 0x18, 0x60, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x06, 0x18, 0x20, // / 15
    0x00, 0xF0, 0x08, 0x04, 0x04, 0x08, 0xF0, 0x00, 0x00, 0x07, 0x08, 0x10, 0x10, 0x08, 0x07, 0x00, // 0 16
    0x00, 0x04, 0x04, 0xFC, 0x04, 0x04, 0x00, 0x00, 0x00, 0x08, 0x08, 0x1F, 0x00, 0x00, 0x00, 0x00, // 1 17
    0x00, 0x0C, 0x14, 0x24, 0x44, 0x84, 0x0C, 0x00, 0x00, 0x0E, 0x10, 0x10, 0x10, 0x11, 0x0E, 0x00, // 2 18
    0x00, 0x18, 0x04, 0x04, 0x04, 0x88, 0x70, 0x00, 0x00, 0x0C, 0x10, 0x11, 0x11, 0x12, 0x0C, 0x00, // 3 19
    0x00, 0xE0, 0x20, 0x24, 0x24, 0xFC, 0x24, 0x00, 0x00, 0x00, 0x03, 0x04, 0x08, 0x1F, 0x00, 0x00, // 4 20
    0x00, 0x98, 0x84, 0x04, 0x04, 0x88, 0x70, 0x00, 0x00, 0x1F, 0x10, 0x11, 0x11, 0x10, 0x10, 0x00, // 5 21
    0x00, 0xF0, 0x88, 0x04, 0x04, 0x88, 0x70, 0x00, 0x00, 0x07, 0x08, 0x11, 0x11, 0x18, 0x00, 0x00, // 6 22
    0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x10, 0x10, 0x13, 0x1C, 0x10, 0x00, // 7 23
    0x00, 0x38, 0x44, 0x84, 0x84, 0x44, 0x38, 0x00, 0x00, 0x0E, 0x11, 0x10, 0x10, 0x11, 0x0E, 0x00, // 8 24
    0x00, 0x00, 0x8C, 0x44, 0x44, 0x88, 0xF0, 0x00, 0x00, 0x07, 0x08, 0x10, 0x10, 0x08, 0x07, 0x00, // 9 25
    0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, // : 26
    0x00, 0x00, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // ; 27
    0x00, 0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x00, // < 28
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00, // = 29
    0x00, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x00, 0x00, 0x10, 0x08, 0x04, 0x02, 0x01, 0x00, 0x00, // > 30
    0x00, 0x00, 0x00, 0x0C, 0x6C, 0x80, 0x00, 0x00, 0x00, 0x0E, 0x12, 0x10, 0x10, 0x10, 0x0F, 0x00, // ? 31
    0xE0, 0x18, 0xE4, 0x24, 0xC4, 0x28, 0xD0, 0x00, 0x03, 0x0C, 0x13, 0x14, 0x17, 0x08, 0x07, 0x00, // @ 32
    0x04, 0x3C, 0xC4, 0x40, 0x40, 0xE4, 0x1C, 0x04, 0x00, 0x00, 0x03, 0x1C, 0x07, 0x00, 0x00, 0x00, // A 33
    0x04, 0xFC, 0x04, 0x04, 0x04, 0x88, 0x70, 0x00, 0x10, 0x1F, 0x11, 0x11, 0x11, 0x0E, 0x00, 0x00, // B 34
    0xE0, 0x18, 0x04, 0x04, 0x04, 0x08, 0x10, 0x00, 0x03, 0x0C, 0x10, 0x10, 0x10, 0x10, 0x1C, 0x00, // C 35
    0x04, 0xFC, 0x04, 0x04, 0x04, 0x08, 0xF0, 0x00, 0x10, 0x1F, 0x10, 0x10, 0x10, 0x08, 0x07, 0x00, // D 36
    0x04, 0xFC, 0x04, 0x04, 0xC4, 0x04, 0x18, 0x00, 0x10, 0x1F, 0x11, 0x11, 0x17, 0x10, 0x08, 0x00, // E 37
    0x04, 0xFC, 0x04, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x10, 0x1F, 0x11, 0x11, 0x17, 0x10, 0x08, 0x00, // F 38
    0xE0, 0x18, 0x04, 0x04, 0x44, 0x78, 0x40, 0x00, 0x03, 0x0C, 0x10, 0x10, 0x10, 0x1C, 0x00, 0x00, // G 39
    0x04, 0xFC, 0x84, 0x80, 0x80, 0x84, 0xFC, 0x04, 0x10, 0x1F, 0x10, 0x00, 0x00, 0x10, 0x1F, 0x10, // H 40
    0x00, 0x04, 0x04, 0xFC, 0x04, 0x04, 0x00, 0x00, 0x00, 0x10, 0x10, 0x1F, 0x10, 0x10, 0x00, 0x00, // I 41
    0x03, 0x01, 0x01, 0x01, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x1F, 0x10, 0x10, 0x00, // J 42
    0x04, 0xFC, 0x04, 0x80, 0x64, 0x1C, 0x04, 0x00, 0x10, 0x1F, 0x11, 0x03, 0x14, 0x18, 0x10, 0x00, // K 43
    0x04, 0xFC, 0x04, 0x04, 0x04, 0x04, 0x0C, 0x00, 0x10, 0x1F, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // L 44
    0x04, 0xFC, 0x00, 0xFC, 0x00, 0xFC, 0x04, 0x00, 0x10, 0x1F, 0x1F, 0x00, 0x1F, 0x1F, 0x10, 0x00, // M 45
    0x04, 0xFC, 0x04, 0x00, 0xE0, 0x18, 0xFC, 0x00, 0x10, 0x1F, 0x0C, 0x03, 0x00, 0x10, 0x1F, 0x10, // N 46
    0xF0, 0x08, 0x04, 0x04, 0x04, 0x08, 0xF0, 0x00, 0x07, 0x08, 0x10, 0x10, 0x10, 0x08, 0x07, 0x00, // O 47
    0x04, 0xFC, 0x84, 0x80, 0x80, 0x80, 0x00, 0x00, 0x10, 0x1F, 0x10, 0x10, 0x10, 0x10, 0x0F, 0x00, // P 48
    0xF0, 0x18, 0x24, 0x24, 0x1C, 0x0A, 0xF2, 0x00, 0x07, 0x08, 0x10, 0x10, 0x10, 0x08, 0x07, 0x00, // Q 49
    0x04, 0xFC, 0x04, 0x00, 0xC0, 0x30, 0x0C, 0x04, 0x10, 0x1F, 0x11, 0x11, 0x11, 0x11, 0x0E, 0x00, // R 50
    0x00, 0x1C, 0x04, 0x84, 0x84, 0x44, 0x38, 0x00, 0x00, 0x0E, 0x11, 0x10, 0x10, 0x10, 0x1C, 0x00, // S 51
    0x00, 0x00, 0x04, 0xFC, 0x04, 0x00, 0x00, 0x00, 0x18, 0x10, 0x10, 0x1F, 0x10, 0x10, 0x18, 0x00, // T 52
    0x00, 0xF8, 0x04, 0x04, 0x04, 0x04, 0xF8, 0x00, 0x10, 0x1F, 0x10, 0x00, 0x00, 0x10, 0x1F, 0x10, // U 53
    0x00, 0x00, 0xE0, 0x1C, 0x70, 0x80, 0x00, 0x00, 0x10, 0x1E, 0x11, 0x00, 0x00, 0x13, 0x1C, 0x10, // V 54
    0xC0, 0x3C, 0xE0, 0x00, 0xE0, 0x3C, 0xC0, 0x00, 0x1F, 0x10, 0x00, 0x1F, 0x00, 0x10, 0x1F, 0x00, // W 55
    0x04, 0x0C, 0x34, 0xC0, 0xC0, 0x34, 0x0C, 0x04, 0x10, 0x18, 0x16, 0x01, 0x01, 0x16, 0x18, 0x10, // X 56
    0x00, 0x00, 0x04, 0xFC, 0x04, 0x00, 0x00, 0x00, 0x10, 0x1C, 0x13, 0x00, 0x13, 0x1C, 0x10, 0x00, // Y 57
    0x04, 0x1C, 0x64, 0x84, 0x04, 0x04, 0x18, 0x00, 0x08, 0x10, 0x10, 0x10, 0x13, 0x1C, 0x10, 0x00, // Z 58
    0x00, 0x00, 0x00, 0xFE, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x40, 0x40, 0x40, 0x00, // [ 59
    0x00, 0x00, 0x00, 0x80, 0x60, 0x1C, 0x03, 0x00, 0x00, 0x30, 0x0C, 0x03, 0x00, 0x00, 0x00, 0x00, // \ 60
    0x00, 0x02, 0x02, 0x02, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x40, 0x7F, 0x00, 0x00, 0x00, // ] 61
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x40, 0x40, 0x40, 0x20, 0x00, // ^ 62
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // _ 63
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x20, 0x00, 0x00, 0x00, 0x00, // ` 64
    0x00, 0x98, 0x24, 0x44, 0x44, 0x44, 0xFC, 0x04, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, // a 65
    0x00, 0xFC, 0x88, 0x04, 0x04, 0x88, 0x70, 0x00, 0x10, 0x1F, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, // b 66
    0x00, 0x70, 0x88, 0x04, 0x04, 0x04, 0x88, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, // c 67
    0x00, 0x70, 0x88, 0x04, 0x04, 0x08, 0xFC, 0x04, 0x00, 0x00, 0x00, 0x01, 0x01, 0x11, 0x1F, 0x00, // d 68
    0x00, 0xF8, 0x44, 0x44, 0x44, 0x44, 0xC8, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, // e 69
    0x00, 0x04, 0x04, 0xFC, 0x04, 0x04, 0x00, 0x00, 0x00, 0x01, 0x01, 0x0F, 0x11, 0x11, 0x11, 0x18, // f 70
    0x00, 0xD6, 0x29, 0x29, 0x29, 0xC9, 0x06, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, // g 71
    0x04, 0xFC, 0x84, 0x00, 0x00, 0x04, 0xFC, 0x04, 0x10, 0x1F, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, // h 72
    0x00, 0x04, 0x04, 0xFC, 0x04, 0x04, 0x00, 0x00, 0x00, 0x01, 0x19, 0x19, 0x00, 0x00, 0x00, 0x00, // i 73
    0x00, 0x03, 0x01, 0x01, 0x01, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x19, 0x19, 0x00, 0x00, // j 74
    0x04, 0xFC, 0x24, 0x40, 0xB4, 0x0C, 0x04, 0x00, 0x10, 0x1F, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, // k 75
    0x00, 0x04, 0x04, 0xFC, 0x04, 0x04, 0x00, 0x00, 0x00, 0x10, 0x10, 0x1F, 0x00, 0x00, 0x00, 0x00, // l 76
    0x04, 0xFC, 0x04, 0x00, 0xFC, 0x04, 0x00, 0xFC, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, // m 77
    0x04, 0xFC, 0x84, 0x00, 0x00, 0x04, 0xFC, 0x04, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, // n 78
    0x00, 0xF8, 0x04, 0x04, 0x04, 0x04, 0xF8, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, // o 79
    0x01, 0xFF, 0x85, 0x04, 0x04, 0x88, 0x70, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, // p 80
    0x00, 0x70, 0x88, 0x04, 0x04, 0x05, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, // q 81
    0x04, 0x04, 0xFC, 0x84, 0x04, 0x00, 0x80, 0x00, 0x01, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01, 0x00, // r 82
    0x00, 0xCC, 0x24, 0x24, 0x24, 0x24, 0x98, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, // s 83
    0x00, 0x00, 0x00, 0xF8, 0x04, 0x04, 0x00, 0x00, 0x00, 0x01, 0x01, 0x07, 0x01, 0x01, 0x00, 0x00, // t 84
    0x00, 0xF8, 0x04, 0x04, 0x04, 0x08, 0xFC, 0x04, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, // u 85
    0x00, 0x80, 0x70, 0x0C, 0x10, 0x60, 0x80, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x01, // v 86
    0xF0, 0x0C, 0x30, 0xC0, 0x30, 0x0C, 0xF0, 0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x01, 0x01, 0x01, // w 87
    0x00, 0x04, 0x8C, 0x74, 0x70, 0x8C, 0x04, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01, 0x00, // x 88
    0x01, 0x81, 0x71, 0x0E, 0x18, 0x60, 0x80, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x01, // y 89
    0x00, 0x84, 0x0C, 0x34, 0x44, 0x84, 0x0C, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, // z 90
    0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x3E, 0x40, 0x40, // { 91
    0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, // | 92
    0x00, 0x02, 0x02, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x3E, 0x01, 0x00, 0x00, 0x00, // } 93
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x80, 0x80, 0x40, 0x40, 0x20, 0x20, // ~ 94
    0x40, 0x40, 0x80, 0xF0, 0x80, 0x40, 0x40, 0x00, 0x02, 0x02, 0x01, 0x0F, 0x01, 0x02, 0x02, 0x00, //   95
};

// Initialize the display
void Display_init()
{
  // Init interfaces
  LCD_SPI.begin();
  pinMode(pinRES, OUTPUT);
  digitalWrite(pinRES, LOW);
  pinMode(pinRS, OUTPUT);
  digitalWrite(pinRS, CMD);
  pinMode(pinCS, OUTPUT);
  digitalWrite(pinCS, HIGH);

  // Reset controller
  digitalWrite (pinRES, LOW);
  delay (500);
  digitalWrite (pinRES, HIGH);
  delay (100);
  
  // Configure controller and clean the screen
  Display_sendcmd (cmdInit, sizeof(cmdInit)/2);
  screenbuf = (uint8_t *) ps_malloc(LCD_HEIGHT*LCD_WIDTH/8);
  memset(screenbuf, 0x00, LCD_HEIGHT*LCD_WIDTH/8);
  Display_update();
}

// Send current buffer to the display
void Display_update()
{
  uint8_t *pbuf = screenbuf;

  LCD_SPI.beginTransaction(SPI_CONFIG);

  for (byte p = 0; p < LCD_HEIGHT/8; p++) {
    Display_sendcmd(ST7565R_SET_PAGE | p);
    Display_sendcmd(ST7565R_SET_COLUMN_UPPER | 0);
    Display_sendcmd(ST7565R_SET_COLUMN_LOWER | 0);
    digitalWrite(pinCS, LOW);
    digitalWrite(pinRS, DATA);
    for (byte c = 0; c < LCD_WIDTH; c++) {
      LCD_SPI.transfer(*pbuf++);
    }
    digitalWrite(pinCS, HIGH);
  }

  LCD_SPI.endTransaction();
}

// Write string s starting at line l (0-3) collumn c (0-16)
void Display_str(char *str, int l, int c) {
  while (*str) {
    Display_chr(*str, l, c);
    if (++c == 16) {
      c = 0;
      if (++l == 4) {
        l = 0;
      }
    }
    str++;
  }
}

// Write char chr at line l (0-3) collumn c (0-16)
void Display_chr(char chr, int l, int c) {
  byte *pgc = (byte *) (font8x16 + ((chr - 0x20) << 4));
  l = (3-l) << 1;
  c = c << 3;
  byte *psc = screenbuf + l*LCD_WIDTH + c;
  for (int i = 0; i < 8; i++) {
    *psc++ = *pgc++;
  }
  psc = screenbuf + (l+1)*LCD_WIDTH + c;
  for (int i = 0; i < 8; i++) {
    *psc++ = *pgc++;
  }
}

// Send a sequence of commands to the display, with delays
void Display_sendcmd (byte *cmd, int nCmds)
{
  LCD_SPI.beginTransaction(SPI_CONFIG);
  digitalWrite(pinCS, LOW);
  digitalWrite(pinRS, CMD);
  for (int i = 0; i < nCmds*2; i+=2)
  {
    LCD_SPI.transfer(cmd[i]);
    if (cmd[i+1] != 0) {
      delay(cmd[i+1]);
    }
  }
  digitalWrite(pinCS, HIGH);
  LCD_SPI.endTransaction();
}

// Send a command byte to the display
void Display_sendcmd (byte cmd)
{
  digitalWrite(pinCS, LOW);
  digitalWrite(pinRS, CMD);
  LCD_SPI.transfer(cmd);
  digitalWrite(pinCS, HIGH);
}

